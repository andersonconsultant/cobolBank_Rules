       ******************************************************************
       *  Open Cobol ESQL (Ocesql) Test Program
       *
       *  TCP Server for saldo/extrato commands
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. SERVER.
        AUTHOR. TSH.
        DATE-WRITTEN. 2024-03-20.

       ******************************************************************
        ENVIRONMENT DIVISION.
       ******************************************************************
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

       ******************************************************************
        DATA DIVISION.
       ******************************************************************
        WORKING-STORAGE SECTION.
OCESQL* EXEC SQL BEGIN DECLARE SECTION END-EXEC.
        01  DBNAME                  PIC  X(30) VALUE SPACE.
        01  USERNAME                PIC  X(30) VALUE SPACE.
        01  PASSWD                  PIC  X(10) VALUE SPACE.
        01  SALDO-RESULT           PIC 9(10)V99 VALUE 0.
        01  TRANSFER-RESULT        PIC X(500) VALUE SPACES.
OCESQL* EXEC SQL END DECLARE SECTION END-EXEC.

       01  WS-SOCKET-FD           PIC 9(4) VALUE 0.
       01  WS-CLIENT-FD           PIC 9(4) VALUE 0.
       01  WS-PORT                PIC 9(4) VALUE 4000.
       01  WS-CMD                 PIC X(100) VALUE SPACE.
       01  WS-STOP                PIC X VALUE "N".
       01  WS-SESSION-ID          PIC X(36) VALUE SPACE.

       01  AF-INET                PIC 9(4) VALUE 2.
       01  SOCK-STREAM            PIC 9(4) VALUE 1.
       01  SOL-SOCKET             PIC 9(4) VALUE 1.
       01  SO-REUSEADDR           PIC 9(4) VALUE 2.
       01  SOCK-ERR               PIC S9(9) VALUE 0.

OCESQL*EXEC SQL INCLUDE SQLCA END-EXEC.
OCESQL     copy "sqlca.cbl".

       ******************************************************************
OCESQL*
OCESQL 01  SQ0001.
OCESQL     02  FILLER PIC X(014) VALUE "SELECT saldo()".
OCESQL     02  FILLER PIC X(1) VALUE X"00".
OCESQL*
OCESQL 01  SQ0002.
OCESQL     02  FILLER PIC X(021) VALUE "SELECT get_transfer()".
OCESQL     02  FILLER PIC X(1) VALUE X"00".
OCESQL*
OCESQL 01  SQ0003.
OCESQL     02  FILLER PIC X(014) VALUE "DISCONNECT ALL".
OCESQL     02  FILLER PIC X(1) VALUE X"00".
OCESQL*
        PROCEDURE DIVISION.
       ******************************************************************
        MAIN-RTN.
       *    Create and bind socket
           CALL "socket" USING AF-INET SOCK-STREAM 0 
                        GIVING WS-SOCKET-FD.
           IF WS-SOCKET-FD < 0
              DISPLAY "Error creating socket"
              STOP RUN
           END-IF.

       *    Set socket options
           CALL "setsockopt" USING WS-SOCKET-FD SOL-SOCKET SO-REUSEADDR
                                  BY VALUE 1 BY VALUE 4
                            GIVING SOCK-ERR.

       *    Bind to port 4000
           CALL "bind" USING WS-SOCKET-FD WS-PORT
                      GIVING SOCK-ERR.
           IF SOCK-ERR < 0
              DISPLAY "Error binding socket"
              STOP RUN
           END-IF.

       *    Listen for connections
           CALL "listen" USING WS-SOCKET-FD BY VALUE 5
                        GIVING SOCK-ERR.
           IF SOCK-ERR < 0
              DISPLAY "Error listening"
              STOP RUN
           END-IF.

           DISPLAY "Server listening on port 4000...".

       *    Connect to database
           MOVE "cobolbd"   TO   DBNAME.
           MOVE "server"    TO   USERNAME.
           MOVE "pwdbd123" TO   PASSWD.
           
OCESQL*    EXEC SQL
OCESQL*        CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
OCESQL*    END-EXEC.
OCESQL     CALL "OCESQLConnect" USING
OCESQL          BY REFERENCE SQLCA
OCESQL          BY REFERENCE USERNAME
OCESQL          BY VALUE 30
OCESQL          BY REFERENCE PASSWD
OCESQL          BY VALUE 10
OCESQL          BY REFERENCE DBNAME
OCESQL          BY VALUE 30
OCESQL     END-CALL.
           
           IF SQLCODE NOT = ZERO 
              PERFORM ERROR-RTN
              STOP RUN
           END-IF.

       *    Main server loop
           PERFORM UNTIL WS-STOP = "Y"
              PERFORM ACCEPT-CLIENT
              PERFORM PROCESS-CLIENT
           END-PERFORM.

           PERFORM SERVER-CLEANUP.
           STOP RUN.

       ACCEPT-CLIENT.
       *    Accept new connection
           CALL "accept" USING WS-SOCKET-FD
                        GIVING WS-CLIENT-FD.
           IF WS-CLIENT-FD < 0
              DISPLAY "Error accepting client"
              MOVE "Y" TO WS-STOP
           END-IF.

       PROCESS-CLIENT.
       *    Read client message
           CALL "read" USING WS-CLIENT-FD WS-CMD BY VALUE 100
                      GIVING SOCK-ERR.
           IF SOCK-ERR <= 0
              PERFORM CLIENT-CLEANUP
              EXIT PARAGRAPH
           END-IF.

       *    Parse command and session ID
           UNSTRING WS-CMD DELIMITED BY "|"
               INTO WS-CMD WS-SESSION-ID.

           IF WS-CMD = "saldo"
              PERFORM GET-SALDO
           ELSE IF WS-CMD = "extrato"
              PERFORM GET-EXTRATO
           ELSE IF WS-CMD = "exit"
              PERFORM CLIENT-CLEANUP
           END-IF.

       GET-SALDO.
       *    Execute SELECT saldo()
OCESQL*    EXEC SQL
OCESQL*        SELECT saldo() INTO :SALDO-RESULT
OCESQL*    END-EXEC.
OCESQL     CALL "OCESQLStartSQL"
OCESQL     END-CALL
OCESQL     CALL "OCESQLSetResultParams" USING
OCESQL          BY VALUE 1
OCESQL          BY VALUE 12
OCESQL          BY VALUE -2
OCESQL          BY REFERENCE SALDO-RESULT
OCESQL     END-CALL
OCESQL     CALL "OCESQLExecSelectIntoOne" USING
OCESQL          BY REFERENCE SQLCA
OCESQL          BY REFERENCE SQ0001
OCESQL          BY VALUE 0
OCESQL          BY VALUE 1
OCESQL     END-CALL
OCESQL     CALL "OCESQLEndSQL"
OCESQL     END-CALL.

           IF SQLCODE NOT = ZERO
              PERFORM ERROR-RTN
           ELSE
              MOVE SPACES TO WS-CMD
              STRING "saldo\" DELIMITED BY SIZE
                     SALDO-RESULT DELIMITED BY SIZE
                     INTO WS-CMD
              CALL "write" USING WS-CLIENT-FD WS-CMD
                                BY VALUE FUNCTION LENGTH(WS-CMD)
           END-IF.

       GET-EXTRATO.
       *    Execute SELECT get_transfer()
OCESQL*    EXEC SQL
OCESQL*        SELECT get_transfer() INTO :TRANSFER-RESULT
OCESQL*    END-EXEC.
OCESQL     CALL "OCESQLStartSQL"
OCESQL     END-CALL
OCESQL     CALL "OCESQLSetResultParams" USING
OCESQL          BY VALUE 16
OCESQL          BY VALUE 500
OCESQL          BY VALUE 0
OCESQL          BY REFERENCE TRANSFER-RESULT
OCESQL     END-CALL
OCESQL     CALL "OCESQLExecSelectIntoOne" USING
OCESQL          BY REFERENCE SQLCA
OCESQL          BY REFERENCE SQ0002
OCESQL          BY VALUE 0
OCESQL          BY VALUE 1
OCESQL     END-CALL
OCESQL     CALL "OCESQLEndSQL"
OCESQL     END-CALL.

           IF SQLCODE NOT = ZERO
              PERFORM ERROR-RTN
           ELSE
              MOVE SPACES TO WS-CMD
              STRING "transfer\" DELIMITED BY SIZE
                     TRANSFER-RESULT DELIMITED BY SIZE
                     INTO WS-CMD
              CALL "write" USING WS-CLIENT-FD WS-CMD
                                BY VALUE FUNCTION LENGTH(WS-CMD)
           END-IF.

       CLIENT-CLEANUP.
           CALL "close" USING WS-CLIENT-FD.

       SERVER-CLEANUP.
       *    DISCONNECT from database
OCESQL*    EXEC SQL
OCESQL*        DISCONNECT ALL
OCESQL*    END-EXEC.
OCESQL     CALL "OCESQLDisconnect" USING
OCESQL          BY REFERENCE SQLCA
OCESQL     END-CALL.
           CALL "close" USING WS-SOCKET-FD.
           DISPLAY "SERVIDOR FINALIZADO".

       ******************************************************************
        ERROR-RTN.
       ******************************************************************
           DISPLAY "*** SQL ERROR ***".
           DISPLAY "SQLCODE: " SQLCODE " " NO ADVANCING.
           EVALUATE SQLCODE
              WHEN  +10
                 DISPLAY "Record not found"
              WHEN  -01
                 DISPLAY "Connection failed"
              WHEN  -20
                 DISPLAY "Internal error"
              WHEN  -30
                 DISPLAY "PostgreSQL error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
              WHEN  OTHER
                 DISPLAY "Undefined error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
           END-EVALUATE.

       ****************************************************************** 